{"version":3,"sources":["App.js","index.js"],"names":["extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","current","update","ref","args","autoRotate","enableZoom","SkyBox","scene","texture","CubeTextureLoader","load","background","App","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"0UAYAA,YAAO,CAAEC,oBAET,IAAMC,EAAiB,WAAM,MAQvBC,cAFFC,EANyB,EAMzBA,OACMC,EAPmB,EAOzBC,GAAMD,WAIFE,EAAWC,mBAEjB,OADAC,aAAS,kBAAMF,EAASG,QAAQC,YAE9B,mCACEC,IAAKL,EACLM,KAAM,CAACT,EAAQC,GACfS,YAAY,EACZC,YAAY,KAMlB,SAASC,IAAU,IACTC,EAAUd,cAAVc,MAGFC,GAFS,IAAIC,qBAEIC,KAAK,CAC1B,UACA,UACA,UACA,UACA,UACA,YAKF,OADAH,EAAMI,WAAaH,EACZ,KA8CMI,MAVf,WACE,OACE,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAAC,EAAD,MAEA,kBAACP,EAAD,QCzFAQ,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,K","file":"static/js/main.6932b820.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\nimport {\n  CubeTextureLoader,\n  CubeCamera,\n  WebGLCubeRenderTarget,\n  RGBFormat,\n  LinearMipmapLinearFilter\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./styles.css\";\n\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame(() => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n      autoRotate={false}\n      enableZoom={false}\n    />\n  );\n};\n\n// Loads the skybox texture and applies it to the scene.\nfunction SkyBox() {\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    \"/nz.jpg\",\n    \"/pz.jpg\",\n    \"/py.jpg\",\n    \"/ny.jpg\",\n    \"/px.jpg\",\n    \"/nx.jpg\"  \n  ]);\n\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n}\n\n// Geometry\nfunction Sphere() {\n  const { scene, gl } = useThree();\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\n  // It must be updated on each frame in order to track camera movement and other changes.\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 100, 0);\n  scene.add(cubeCamera);\n\n  // Update the cubeCamera with current renderer and scene.\n  useFrame(() => cubeCamera.update(gl, scene));\n\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]} castShadow>\n      <directionalLight intensity={0.5} />\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n      <meshBasicMaterial\n        attach=\"material\"\n        envMap={cubeCamera.renderTarget.texture}\n        color=\"white\"\n        roughness={0.1}\n        metalness={1}\n      />\n    </mesh>\n  );\n}\n\n// Lights\nfunction App() {\n  return (\n    <Canvas className=\"canvas\">\n      <CameraControls />\n      {/* <Sphere /> */}\n      <SkyBox />\n    </Canvas>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}